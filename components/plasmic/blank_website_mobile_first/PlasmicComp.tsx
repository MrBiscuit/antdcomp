// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ec2EGmqeZaBv6iqjTrAK9W
// Component: OliqYognCxZh

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio"; // plasmic-import: PZQhrvIGy1/codeComponent
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio"; // plasmic-import: -CXVV9tXtP/codeComponent
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton"; // plasmic-import: bx9Xzvf5_eu/codeComponent
import { Switch } from "antd"; // plasmic-import: 40zLyi3QJGmp/codeComponent
import { AntdCheckbox } from "@plasmicpkgs/antd5/skinny/registerCheckbox"; // plasmic-import: aFHKFWNvs7/codeComponent
import { AntdAvatar } from "@plasmicpkgs/antd5/skinny/registerAvatar"; // plasmic-import: nqcsn8n56U/codeComponent
import { Divider } from "antd"; // plasmic-import: EFbBT2lZVjKE/codeComponent
import { Breadcrumb } from "antd"; // plasmic-import: 9SbWfVpqJCVx/codeComponent
import { Alert } from "antd"; // plasmic-import: obn1ze3KDtRX/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_blank_website_mobile_first.module.css"; // plasmic-import: ec2EGmqeZaBv6iqjTrAK9W/projectcss
import sty from "./PlasmicComp.module.css"; // plasmic-import: OliqYognCxZh/css

createPlasmicElementProxy;

export type PlasmicComp__VariantMembers = {
  component:
    | "button"
    | "avatar"
    | "checkbox"
    | "_switch"
    | "divider"
    | "breadcrumb"
    | "alert";
};
export type PlasmicComp__VariantsArgs = {
  component?: SingleChoiceArg<
    | "button"
    | "avatar"
    | "checkbox"
    | "_switch"
    | "divider"
    | "breadcrumb"
    | "alert"
  >;
};
type VariantPropType = keyof PlasmicComp__VariantsArgs;
export const PlasmicComp__VariantProps = new Array<VariantPropType>(
  "component"
);

export type PlasmicComp__ArgsType = {
  data?: any;
};
type ArgPropType = keyof PlasmicComp__ArgsType;
export const PlasmicComp__ArgProps = new Array<ArgPropType>("data");

export type PlasmicComp__OverridesType = {
  root?: p.Flex<"div">;
  radioGroup?: p.Flex<typeof AntdRadioGroup>;
  section?: p.Flex<"section">;
  button?: p.Flex<typeof AntdButton>;
  _switch?: p.Flex<typeof Switch>;
  checkbox?: p.Flex<typeof AntdCheckbox>;
  avatar?: p.Flex<typeof AntdAvatar>;
  divider?: p.Flex<typeof Divider>;
  breadcrumb?: p.Flex<typeof Breadcrumb>;
  alert?: p.Flex<typeof Alert>;
};

export interface DefaultCompProps {
  data?: any;
  component?: SingleChoiceArg<
    | "button"
    | "avatar"
    | "checkbox"
    | "_switch"
    | "divider"
    | "breadcrumb"
    | "alert"
  >;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicComp__RenderFunc(props: {
  variants: PlasmicComp__VariantsArgs;
  args: PlasmicComp__ArgsType;
  overrides: PlasmicComp__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          data: [
            {
              block: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            },
            {
              classNames: {
                propType: "Record<SemanticDOM, string>",
                propValues: [],
                currentValue: "-"
              }
            },
            {
              danger: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            },
            {
              disabled: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            },
            {
              ghost: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            },
            {
              loading: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            },
            {
              shape: {
                propType: "string",
                propValues: ["default", "circle", "round"],
                currentValue: "default"
              }
            },
            {
              size: {
                propType: "string",
                propValues: ["large", "middle", "small"],
                currentValue: "middle"
              }
            },
            {
              styles: {
                propType: "Record<SemanticDOM, CSSProperties>",
                propValues: [],
                currentValue: "-"
              }
            },
            {
              type: {
                propType: "string",
                propValues: ["primary", "dashed", "link", "text", "default"],
                currentValue: "default"
              }
            }
          ]
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "radioGroup[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "component",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.component
      },
      {
        path: "checkbox.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $props.data.find(prop => prop.checked)?.checked
                  ?.currentValue === "true"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          sty.root,
          {
            [sty.rootcomponent__switch]: hasVariant(
              $state,
              "component",
              "_switch"
            ),
            [sty.rootcomponent_avatar]: hasVariant(
              $state,
              "component",
              "avatar"
            ),
            [sty.rootcomponent_button]: hasVariant(
              $state,
              "component",
              "button"
            ),
            [sty.rootcomponent_checkbox]: hasVariant(
              $state,
              "component",
              "checkbox"
            )
          }
        )}
      >
        {true ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__h2RdH, {
              [sty.freeBoxcomponent__switch__h2RdH6Unwa]: hasVariant(
                $state,
                "component",
                "_switch"
              ),
              [sty.freeBoxcomponent_avatar__h2RdHx9J7I]: hasVariant(
                $state,
                "component",
                "avatar"
              ),
              [sty.freeBoxcomponent_button__h2RdHbEp92]: hasVariant(
                $state,
                "component",
                "button"
              )
            })}
          >
            {true
              ? (
                  (() => {
                    try {
                      return $props.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })() ?? []
                ).map((currentItem, currentIndex) => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dYgeh, {
                      [sty.freeBoxcomponent__switch__dYgeh6Unwa]: hasVariant(
                        $state,
                        "component",
                        "_switch"
                      ),
                      [sty.freeBoxcomponent_button__dYgehBEp92]: hasVariant(
                        $state,
                        "component",
                        "button"
                      )
                    })}
                    key={currentIndex}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xdxNx
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tsFFu,
                            {
                              [sty.textcomponent_avatar__tsFFux9J7I]:
                                hasVariant($state, "component", "avatar")
                            }
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return Object.keys(currentItem)[0];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "name:";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.radioGroup,
                              {
                                [sty.radioGroupcomponent__switch]: hasVariant(
                                  $state,
                                  "component",
                                  "_switch"
                                ),
                                [sty.radioGroupcomponent_avatar]: hasVariant(
                                  $state,
                                  "component",
                                  "avatar"
                                ),
                                [sty.radioGroupcomponent_button]: hasVariant(
                                  $state,
                                  "component",
                                  "button"
                                )
                              }
                            ),
                            onChange: async (...eventArgs: any) => {
                              p.generateStateOnChangeProp($state, [
                                "radioGroup",
                                currentIndex,
                                "value"
                              ]).apply(null, eventArgs);
                              (async value => {
                                const $steps = {};
                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "customFunction",
                                            interactionUuid: "Q3isEsKg0uX9",
                                            componentUuid: "OliqYognCxZh",
                                            argName: "customFunction"
                                          },
                                          () => async () => {
                                            return ($props.data[currentIndex][
                                              Object.keys(
                                                $props.data[currentIndex]
                                              )[0]
                                            ].currentValue = value);
                                          }
                                        )
                                      };
                                      return __wrapUserFunction(
                                        {
                                          type: "InteractionLoc",
                                          actionName: "customFunction",
                                          interactionUuid: "Q3isEsKg0uX9",
                                          componentUuid: "OliqYognCxZh"
                                        },
                                        () =>
                                          (({ customFunction }) => {
                                            return customFunction();
                                          })?.apply(null, [actionArgs]),
                                        actionArgs
                                      );
                                    })()
                                  : undefined;
                                if (
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await __wrapUserPromise(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "customFunction",
                                      interactionUuid: "Q3isEsKg0uX9",
                                      componentUuid: "OliqYognCxZh"
                                    },
                                    $steps["runCode"]
                                  );
                                }
                              }).apply(null, eventArgs);
                            },
                            optionType: "button" as const,
                            options: (() => {
                              try {
                                return currentItem[Object.keys(currentItem)[0]]
                                  .propValues;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [
                                    { value: "option1", label: "Option 1" },
                                    { value: "option2", label: "Option 2" }
                                  ];
                                }
                                throw e;
                              }
                            })(),
                            value: p.generateStateValueProp($state, [
                              "radioGroup",
                              currentIndex,
                              "value"
                            ])
                          };
                          p.initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "radioGroup[].value"
                              }
                            ],
                            [currentIndex],
                            undefined ?? {},
                            child$Props
                          );
                          p.initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "radioGroup[].value",
                                initFunc: ({ $props, $state, $queries }) =>
                                  undefined
                              }
                            ],
                            [currentIndex]
                          );
                          return (
                            <AntdRadioGroup
                              data-plasmic-name={"radioGroup"}
                              data-plasmic-override={overrides.radioGroup}
                              {...child$Props}
                            >
                              <AntdRadio
                                className={classNames(
                                  "__wab_instance",
                                  sty.radio__sq48,
                                  {
                                    [sty.radiocomponent_avatar__sq48X9J7I]:
                                      hasVariant($state, "component", "avatar")
                                  }
                                )}
                                value={"op1" as const}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__rL3Yn
                                  )}
                                >
                                  {"Option 1"}
                                </div>
                              </AntdRadio>
                              <AntdRadio
                                className={classNames(
                                  "__wab_instance",
                                  sty.radio__qDEa
                                )}
                                value={"op2" as const}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__c6KQv
                                  )}
                                >
                                  {"Option 2"}
                                </div>
                              </AntdRadio>
                            </AntdRadioGroup>
                          );
                        })()}
                      </p.Stack>
                    ) : null}
                  </div>
                ))
              : null}
          </div>
        ) : null}
        <section
          data-plasmic-name={"section"}
          data-plasmic-override={overrides.section}
          className={classNames(projectcss.all, sty.section, {
            [sty.sectioncomponent__switch]: hasVariant(
              $state,
              "component",
              "_switch"
            ),
            [sty.sectioncomponent_alert]: hasVariant(
              $state,
              "component",
              "alert"
            ),
            [sty.sectioncomponent_avatar]: hasVariant(
              $state,
              "component",
              "avatar"
            ),
            [sty.sectioncomponent_breadcrumb]: hasVariant(
              $state,
              "component",
              "breadcrumb"
            ),
            [sty.sectioncomponent_button]: hasVariant(
              $state,
              "component",
              "button"
            ),
            [sty.sectioncomponent_checkbox]: hasVariant(
              $state,
              "component",
              "checkbox"
            ),
            [sty.sectioncomponent_divider]: hasVariant(
              $state,
              "component",
              "divider"
            )
          })}
        >
          {(
            hasVariant($state, "component", "checkbox")
              ? false
              : hasVariant($state, "component", "avatar")
              ? false
              : hasVariant($state, "component", "button")
              ? true
              : false
          ) ? (
            <AntdButton
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button, {
                [sty.buttoncomponent__switch]: hasVariant(
                  $state,
                  "component",
                  "_switch"
                ),
                [sty.buttoncomponent_avatar]: hasVariant(
                  $state,
                  "component",
                  "avatar"
                ),
                [sty.buttoncomponent_button]: hasVariant(
                  $state,
                  "component",
                  "button"
                ),
                [sty.buttoncomponent_checkbox]: hasVariant(
                  $state,
                  "component",
                  "checkbox"
                )
              })}
              danger={
                hasVariant($state, "component", "button")
                  ? (() => {
                      try {
                        return (
                          $props.data.find(prop => prop.danger)?.danger
                            ?.currentValue === "true"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  : undefined
              }
              disabled={
                hasVariant($state, "component", "button")
                  ? (() => {
                      try {
                        return (
                          $props.data.find(prop => prop.disabled)?.disabled
                            ?.currentValue === "true"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  : undefined
              }
              ghost={
                hasVariant($state, "component", "button")
                  ? (() => {
                      try {
                        return (
                          $props.data.find(prop => prop.ghost)?.ghost
                            ?.currentValue === "true"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  : undefined
              }
              loading={
                hasVariant($state, "component", "button")
                  ? (() => {
                      try {
                        return (
                          $props.data.find(prop => prop.loading)?.loading
                            ?.currentValue === "true"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  : undefined
              }
              shape={
                hasVariant($state, "component", "button")
                  ? (() => {
                      try {
                        return (() => {
                          return $props.data.find(prop => prop.shape)?.shape
                            ?.currentValue;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  : undefined
              }
              size={
                hasVariant($state, "component", "button")
                  ? (() => {
                      try {
                        return (() => {
                          return $props.data.find(prop => prop.size)?.size
                            ?.currentValue;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  : undefined
              }
              type={
                hasVariant($state, "component", "button")
                  ? (() => {
                      try {
                        return (() => {
                          return $props.data.find(prop => prop.type)?.type
                            ?.currentValue;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  : undefined
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qtZkD
                )}
              >
                {"Button"}
              </div>
            </AntdButton>
          ) : null}
          {(hasVariant($state, "component", "_switch") ? true : false) ? (
            <Switch
              data-plasmic-name={"_switch"}
              data-plasmic-override={overrides._switch}
              autoFocus={false}
              checked={(() => {
                try {
                  return (
                    $props.data.find(prop => prop.checked)?.checked
                      ?.currentValue === "true"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty._switch, {
                [sty._switchcomponent__switch]: hasVariant(
                  $state,
                  "component",
                  "_switch"
                )
              })}
              disabled={(() => {
                try {
                  return (
                    $props.data.find(prop => prop.disabled)?.disabled
                      ?.currentValue === "true"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              loading={(() => {
                try {
                  return (
                    $props.data.find(prop => prop.loading)?.loading
                      ?.currentValue === "true"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()}
              size={(() => {
                try {
                  return $props.data.find(prop => prop.size)?.size
                    ?.currentValue;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "default";
                  }
                  throw e;
                }
              })()}
            />
          ) : null}
          {(hasVariant($state, "component", "checkbox") ? true : false) ? (
            <AntdCheckbox
              data-plasmic-name={"checkbox"}
              data-plasmic-override={overrides.checkbox}
              checked={p.generateStateValueProp($state, [
                "checkbox",
                "checked"
              ])}
              className={classNames("__wab_instance", sty.checkbox, {
                [sty.checkboxcomponent__switch]: hasVariant(
                  $state,
                  "component",
                  "_switch"
                ),
                [sty.checkboxcomponent_checkbox]: hasVariant(
                  $state,
                  "component",
                  "checkbox"
                )
              })}
              defaultChecked={(() => {
                try {
                  return (
                    $props.data.find(prop => prop.checked)?.checked
                      ?.currentValue === "true"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              disabled={(() => {
                try {
                  return (
                    $props.data.find(prop => prop.disabled)?.disabled
                      ?.currentValue === "true"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              indeterminate={(() => {
                try {
                  return (
                    $props.data.find(prop => prop.indeterminate)?.indeterminate
                      ?.currentValue === "true"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              onChange={p.generateStateOnChangeProp($state, [
                "checkbox",
                "checked"
              ])}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__viVbO
                )}
              >
                {"Checkbox"}
              </div>
            </AntdCheckbox>
          ) : null}
          {(
            hasVariant($state, "component", "avatar")
              ? true
              : hasVariant($state, "component", "button")
              ? false
              : false
          ) ? (
            <AntdAvatar
              data-plasmic-name={"avatar"}
              data-plasmic-override={overrides.avatar}
              className={classNames("__wab_instance", sty.avatar, {
                [sty.avatarcomponent_avatar]: hasVariant(
                  $state,
                  "component",
                  "avatar"
                ),
                [sty.avatarcomponent_button]: hasVariant(
                  $state,
                  "component",
                  "button"
                )
              })}
              letters={(() => {
                try {
                  return (() => {
                    return $props.data.find(prop => prop.letters)?.letters
                      ?.currentValue;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "AB";
                  }
                  throw e;
                }
              })()}
              shape={(() => {
                try {
                  return (() => {
                    return $props.data.find(prop => prop.shape)?.shape
                      ?.currentValue;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              size={(() => {
                try {
                  return (() => {
                    return $props.data.find(prop => prop.size)?.size
                      ?.currentValue;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              src={(() => {
                try {
                  return (() => {
                    return $props.data.find(prop => prop.src)?.src
                      ?.currentValue;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          ) : null}
          {(hasVariant($state, "component", "divider") ? true : true) ? (
            <Divider
              data-plasmic-name={"divider"}
              data-plasmic-override={overrides.divider}
              className={classNames("__wab_instance", sty.divider, {
                [sty.dividercomponent_divider]: hasVariant(
                  $state,
                  "component",
                  "divider"
                )
              })}
              dashed={(() => {
                try {
                  return (
                    $props.data.find(prop => prop.dashed)?.dashed
                      ?.currentValue === "true"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()}
              orientation={(() => {
                try {
                  return $props.data.find(prop => prop.orientation)?.orientation
                    ?.currentValue;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "center";
                  }
                  throw e;
                }
              })()}
              plain={(() => {
                try {
                  return (
                    $props.data.find(prop => prop.plain)?.plain
                      ?.currentValue === "true"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()}
              type={(() => {
                try {
                  return $props.data.find(prop => prop.type)?.type
                    ?.currentValue;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "horizontal";
                  }
                  throw e;
                }
              })()}
            />
          ) : null}
          {(hasVariant($state, "component", "breadcrumb") ? true : true) ? (
            <Breadcrumb
              data-plasmic-name={"breadcrumb"}
              data-plasmic-override={overrides.breadcrumb}
              className={classNames("__wab_instance", sty.breadcrumb, {
                [sty.breadcrumbcomponent_breadcrumb]: hasVariant(
                  $state,
                  "component",
                  "breadcrumb"
                )
              })}
              items={[
                { title: "Home" },
                { title: "Application Center", href: "" },
                { title: "Application List", href: "" },
                { title: "An Application" }
              ]}
              separator={(() => {
                try {
                  return $props.data.find(prop => prop.separator)?.separator
                    ?.currentValue;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "/";
                  }
                  throw e;
                }
              })()}
            />
          ) : null}
          {(hasVariant($state, "component", "alert") ? true : true) ? (
            <Alert
              data-plasmic-name={"alert"}
              data-plasmic-override={overrides.alert}
              banner={(() => {
                try {
                  return (
                    $props.data.find(prop => prop.banner)?.banner
                      ?.currentValue === "true"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.alert, {
                [sty.alertcomponent_alert]: hasVariant(
                  $state,
                  "component",
                  "alert"
                )
              })}
              closeIcon={true}
              description={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__a8P,
                    {
                      [sty.textcomponent_alert__a8Pradbm]: hasVariant(
                        $state,
                        "component",
                        "alert"
                      )
                    }
                  )}
                >
                  {
                    "Additional description and information about copywriting.\n"
                  }
                </div>
              }
              message={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7Ewz,
                    {
                      [sty.textcomponent_alert___7EwzRadbm]: hasVariant(
                        $state,
                        "component",
                        "alert"
                      )
                    }
                  )}
                >
                  {"Alert Message"}
                </div>
              }
              showIcon={(() => {
                try {
                  return (
                    $props.data.find(prop => prop.showIcon)?.showIcon
                      ?.currentValue === "true"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()}
              type={(() => {
                try {
                  return $props.data.find(prop => prop.type)?.type
                    ?.currentValue;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "info";
                  }
                  throw e;
                }
              })()}
            />
          ) : null}
        </section>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "radioGroup",
    "section",
    "button",
    "_switch",
    "checkbox",
    "avatar",
    "divider",
    "breadcrumb",
    "alert"
  ],
  radioGroup: ["radioGroup"],
  section: [
    "section",
    "button",
    "_switch",
    "checkbox",
    "avatar",
    "divider",
    "breadcrumb",
    "alert"
  ],
  button: ["button"],
  _switch: ["_switch"],
  checkbox: ["checkbox"],
  avatar: ["avatar"],
  divider: ["divider"],
  breadcrumb: ["breadcrumb"],
  alert: ["alert"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  radioGroup: typeof AntdRadioGroup;
  section: "section";
  button: typeof AntdButton;
  _switch: typeof Switch;
  checkbox: typeof AntdCheckbox;
  avatar: typeof AntdAvatar;
  divider: typeof Divider;
  breadcrumb: typeof Breadcrumb;
  alert: typeof Alert;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicComp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicComp__VariantsArgs;
    args?: PlasmicComp__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicComp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicComp__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicComp__ArgProps,
          internalVariantPropNames: PlasmicComp__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComp";
  } else {
    func.displayName = `PlasmicComp.${nodeName}`;
  }
  return func;
}

export const PlasmicComp = Object.assign(
  // Top-level PlasmicComp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    radioGroup: makeNodeComponent("radioGroup"),
    section: makeNodeComponent("section"),
    button: makeNodeComponent("button"),
    _switch: makeNodeComponent("_switch"),
    checkbox: makeNodeComponent("checkbox"),
    avatar: makeNodeComponent("avatar"),
    divider: makeNodeComponent("divider"),
    breadcrumb: makeNodeComponent("breadcrumb"),
    alert: makeNodeComponent("alert"),

    // Metadata about props expected for PlasmicComp
    internalVariantProps: PlasmicComp__VariantProps,
    internalArgProps: PlasmicComp__ArgProps
  }
);

export default PlasmicComp;
/* prettier-ignore-end */

// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ec2EGmqeZaBv6iqjTrAK9W
// Component: qfSkZIbsj2Nv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ListItem from "../../ListItem"; // plasmic-import: KSlN7_uDUOFX/component
import Comp from "../../Comp"; // plasmic-import: OliqYognCxZh/component

import { useScreenVariants as useScreenVariants_92Lg6K3RJGs } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: _92lg6k3rJGs/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_blank_website_mobile_first.module.css"; // plasmic-import: ec2EGmqeZaBv6iqjTrAK9W/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: qfSkZIbsj2Nv/css

createPlasmicElementProxy;

export type PlasmicHome__VariantMembers = {};
export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  listOfComps?: p.Flex<"div">;
  listItem?: p.Flex<typeof ListItem>;
  comp?: p.Flex<typeof Comp>;
};

export interface DefaultHomeProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "data",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          button: [
            {
              danger: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            },
            {
              disabled: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            },
            {
              ghost: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            },
            {
              loading: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            },
            {
              shape: {
                propType: "string",
                propValues: ["default", "circle", "round"],
                currentValue: "default"
              }
            },
            {
              size: {
                propType: "string",
                propValues: ["large", "middle", "small"],
                currentValue: "middle"
              }
            },
            {
              type: {
                propType: "string",
                propValues: ["primary", "dashed", "link", "text", "default"],
                currentValue: "default"
              }
            }
          ],
          avatar: [
            {
              shape: {
                propType: "string",
                propValues: ["circle", "square"],
                currentValue: "circle"
              }
            },
            {
              size: {
                propType: "string",
                propValues: ["large", "small", "default"],
                currentValue: "default"
              }
            },
            {
              src: {
                propType: "string",
                propValues: [
                  { label: "no image", value: "-" },
                  {
                    label: "svg",
                    value:
                      "https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg"
                  },
                  {
                    label: "png",
                    value:
                      "https://gw.alipayobjects.com/zos/antfincdn/XAosXuNZyF/BiazfanxmamNRoxxVxka.png"
                  },
                  {
                    label: "png alt",
                    value:
                      "https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png"
                  }
                ],
                currentValue: "-"
              }
            },
            {
              letters: {
                propType: "string",
                propValues: ["A", "B", "C", "AB", "AC"],
                currentValue: "AB"
              }
            }
          ],
          checkbox: [
            {
              checked: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            },
            {
              disabled: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            },
            {
              indeterminate: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            }
          ],
          switch: [
            {
              autoFocus: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            },
            {
              checked: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            },
            {
              defaultChecked: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            },
            {
              disabled: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            },
            {
              loading: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            },
            {
              size: {
                propType: "string",
                propValues: ["default", "small"],
                currentValue: "default"
              }
            },
            {
              checkedChildren: {
                propType: "string",
                propValues: ["", "\u5f00\u542f", "On", "1"]
              }
            },
            {
              unCheckedChildren: {
                propType: "string",
                propValues: ["", "\u5173\u95ed", "Off", "0"]
              }
            }
          ],
          divider: [
            {
              dashed: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            },
            {
              orientation: {
                propType: "string",
                propValues: ["left", "right", "center"],
                currentValue: "center"
              }
            },
            {
              plain: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "true"
              }
            },
            {
              type: {
                propType: "string",
                propValues: ["horizontal", "vertical"],
                currentValue: "horizontal"
              }
            }
          ],
          breadcrumb: [
            {
              separator: {
                propType: "string",
                propValues: ["/", ">", ":", "\u2192"],
                currentValue: "/"
              }
            }
          ],
          alert: [
            {
              banner: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            },
            {
              showIcon: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            },
            {
              type: {
                propType: "string",
                propValues: ["success", "info", "warning", "error"],
                currentValue: "info"
              }
            }
          ],
          slider: [
            {
              autoAdjustOverflow: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "true"
              }
            },
            {
              autoFocus: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            },
            {
              disabled: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            },
            {
              keyboard: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "true"
              }
            },
            {
              dots: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            },
            {
              included: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "true"
              }
            },
            {
              max: {
                propType: "number",
                propValues: ["60", "80", "100"],
                currentValue: "100"
              }
            },
            {
              min: {
                propType: "number",
                propValues: ["0", "20", "40"],
                currentValue: "0"
              }
            },
            {
              range: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            },
            {
              reverse: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            },
            {
              step: {
                propType: "number",
                propValues: ["0.5", "1", "2", "4", "8"],
                currentValue: "1"
              }
            },
            {
              vertical: {
                propType: "boolean",
                propValues: ["true", "false"],
                currentValue: "false"
              }
            }
          ]
        })
      },
      {
        path: "currentComp",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "button" as const
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_92Lg6K3RJGs()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <div
                data-plasmic-name={"listOfComps"}
                data-plasmic-override={overrides.listOfComps}
                className={classNames(projectcss.all, sty.listOfComps)}
              >
                {(
                  (() => {
                    try {
                      return Object.keys($state.data);
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })() ?? []
                ).map((currentItem, currentIndex) => (
                  <ListItem
                    data-plasmic-name={"listItem"}
                    data-plasmic-override={overrides.listItem}
                    className={classNames("__wab_instance", sty.listItem)}
                    current={(() => {
                      try {
                        return currentItem === $state.currentComp;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    key={currentIndex}
                    label={(() => {
                      try {
                        return (() => {
                          return currentItem
                            .replace(
                              /(?:^\w|[A-Z]|\b\w)/g,
                              function (word, index) {
                                return word.toUpperCase();
                              }
                            )
                            .replace(/\s+/g, "");
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};
                      $steps["updateCurrentComp"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "updateVariable",
                                  interactionUuid: "pS2AsALNJWMK",
                                  componentUuid: "qfSkZIbsj2Nv",
                                  argName: "variable"
                                },
                                () => ({
                                  objRoot: $state,
                                  variablePath: ["currentComp"]
                                })
                              ),
                              operation: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "updateVariable",
                                  interactionUuid: "pS2AsALNJWMK",
                                  componentUuid: "qfSkZIbsj2Nv",
                                  argName: "operation"
                                },
                                () => 0
                              ),
                              value: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "updateVariable",
                                  interactionUuid: "pS2AsALNJWMK",
                                  componentUuid: "qfSkZIbsj2Nv",
                                  argName: "value"
                                },
                                () => currentItem
                              )
                            };
                            return __wrapUserFunction(
                              {
                                type: "InteractionLoc",
                                actionName: "updateVariable",
                                interactionUuid: "pS2AsALNJWMK",
                                componentUuid: "qfSkZIbsj2Nv"
                              },
                              () =>
                                (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  p.set(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]),
                              actionArgs
                            );
                          })()
                        : undefined;
                      if (
                        typeof $steps["updateCurrentComp"] === "object" &&
                        typeof $steps["updateCurrentComp"].then === "function"
                      ) {
                        $steps["updateCurrentComp"] = await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "updateVariable",
                            interactionUuid: "pS2AsALNJWMK",
                            componentUuid: "qfSkZIbsj2Nv"
                          },
                          $steps["updateCurrentComp"]
                        );
                      }
                    }}
                  />
                ))}
              </div>
              {true ? (
                <Comp
                  data-plasmic-name={"comp"}
                  data-plasmic-override={overrides.comp}
                  className={classNames("__wab_instance", sty.comp)}
                  component={(() => {
                    try {
                      return (() => {
                        let c = $state.currentComp;
                        if (c === "switch") {
                          return "_switch";
                        } else {
                          return c;
                        }
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  data={(() => {
                    try {
                      return $state.data[$state.currentComp];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              ) : null}
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "listOfComps", "listItem", "comp"],
  freeBox: ["freeBox", "listOfComps", "listItem", "comp"],
  listOfComps: ["listOfComps", "listItem"],
  listItem: ["listItem"],
  comp: ["comp"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  listOfComps: "div";
  listItem: typeof ListItem;
  comp: typeof Comp;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHome__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    listOfComps: makeNodeComponent("listOfComps"),
    listItem: makeNodeComponent("listItem"),
    comp: makeNodeComponent("comp"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
